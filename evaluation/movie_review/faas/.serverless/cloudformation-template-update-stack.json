{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "LoadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/Load"
      }
    },
    "ExportLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/Export"
      }
    },
    "DeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/Delete"
      }
    },
    "GetStateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetState"
      }
    },
    "GetBatchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/GetBatch"
      }
    },
    "SetFieldLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/SetField"
      }
    },
    "ReferenceGetByIndexLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ReferenceGetByIndex"
      }
    },
    "AccountVerifyPasswordLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/AccountVerifyPassword"
      }
    },
    "ReviewDownvoteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ReviewDownvote"
      }
    },
    "ReviewUpvoteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ReviewUpvote"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "faas",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Load:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Export:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Delete:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetState:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetBatch:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SetField:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceGetByIndex:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AccountVerifyPassword:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReviewDownvote:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReviewUpvote:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Load:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Export:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Delete:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetState:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetBatch:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SetField:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceGetByIndex:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AccountVerifyPassword:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReviewDownvote:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReviewUpvote:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "faas",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "LoadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/Load.zip"
        },
        "Handler": "bin/Load",
        "Runtime": "go1.x",
        "FunctionName": "Load",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoadLogGroup"
      ]
    },
    "LoadLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "LoadLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "ExportLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/Export.zip"
        },
        "Handler": "bin/Export",
        "Runtime": "go1.x",
        "FunctionName": "Export",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExportLogGroup"
      ]
    },
    "ExportLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "ExportLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "DeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/Delete.zip"
        },
        "Handler": "bin/Delete",
        "Runtime": "go1.x",
        "FunctionName": "Delete",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteLogGroup"
      ]
    },
    "DeleteLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "GetStateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/GetState.zip"
        },
        "Handler": "bin/GetState",
        "Runtime": "go1.x",
        "FunctionName": "GetState",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetStateLogGroup"
      ]
    },
    "GetStateLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "GetStateLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "GetBatchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/GetBatch.zip"
        },
        "Handler": "bin/GetBatch",
        "Runtime": "go1.x",
        "FunctionName": "GetBatch",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetBatchLogGroup"
      ]
    },
    "GetBatchLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "GetBatchLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "SetFieldLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/SetField.zip"
        },
        "Handler": "bin/SetField",
        "Runtime": "go1.x",
        "FunctionName": "SetField",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SetFieldLogGroup"
      ]
    },
    "SetFieldLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "SetFieldLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "ReferenceGetByIndexLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/ReferenceGetByIndex.zip"
        },
        "Handler": "bin/ReferenceGetByIndex",
        "Runtime": "go1.x",
        "FunctionName": "ReferenceGetByIndex",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReferenceGetByIndexLogGroup"
      ]
    },
    "ReferenceGetByIndexLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "ReferenceGetByIndexLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "AccountVerifyPasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/AccountVerifyPassword.zip"
        },
        "Handler": "bin/AccountVerifyPassword",
        "Runtime": "go1.x",
        "FunctionName": "AccountVerifyPassword",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AccountVerifyPasswordLogGroup"
      ]
    },
    "AccountVerifyPasswordLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "AccountVerifyPasswordLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "ReviewDownvoteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/ReviewDownvote.zip"
        },
        "Handler": "bin/ReviewDownvote",
        "Runtime": "go1.x",
        "FunctionName": "ReviewDownvote",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReviewDownvoteLogGroup"
      ]
    },
    "ReviewDownvoteLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "ReviewDownvoteLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    },
    "ReviewUpvoteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/faas/dev/1675201869348-2023-01-31T21:51:09.348Z/ReviewUpvote.zip"
        },
        "Handler": "bin/ReviewUpvote",
        "Runtime": "go1.x",
        "FunctionName": "ReviewUpvote",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReviewUpvoteLogGroup"
      ]
    },
    "ReviewUpvoteLambdaEvConf": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "FunctionName": {
          "Ref": "ReviewUpvoteLambdaFunction"
        },
        "DestinationConfig": {},
        "Qualifier": "$LATEST",
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-faas-dev-ServerlessDeploymentBucketName"
      }
    }
  }
}