{
  "service": {
    "service": "faas",
    "serviceObject": {
      "name": "faas"
    },
    "provider": {
      "name": "aws",
      "runtime": "go1.x",
      "memorySize": 1024,
      "versionFunctions": false,
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ],
      "stage": "dev",
      "region": "us-east-1",
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "LoadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Load"
            }
          },
          "ExportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Export"
            }
          },
          "DeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Delete"
            }
          },
          "GetFieldLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/GetField"
            }
          },
          "SetFieldLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/SetField"
            }
          },
          "ReferenceGetSortKeysByPartitionKeyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ReferenceGetSortKeysByPartitionKey"
            }
          },
          "ReferenceGetByIndexLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ReferenceGetByIndex"
            }
          },
          "ReferenceAddToManyToManyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ReferenceAddToManyToMany"
            }
          },
          "ProductDecreaseAvailabilityByLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ProductDecreaseAvailabilityBy"
            }
          },
          "UserVerifyPasswordLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/UserVerifyPassword"
            }
          },
          "NewOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/NewOrder"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "faas",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Load:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Export:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Delete:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetField:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SetField:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceGetSortKeysByPartitionKey:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceGetByIndex:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceAddToManyToMany:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ProductDecreaseAvailabilityBy:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UserVerifyPassword:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/NewOrder:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Load:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Export:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Delete:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GetField:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SetField:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceGetSortKeysByPartitionKey:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceGetByIndex:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ReferenceAddToManyToMany:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ProductDecreaseAvailabilityBy:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UserVerifyPassword:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/NewOrder:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "faas",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "LoadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/Load.zip"
              },
              "Handler": "bin/Load",
              "Runtime": "go1.x",
              "FunctionName": "Load",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoadLogGroup"
            ]
          },
          "LoadLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "LoadLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "ExportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/Export.zip"
              },
              "Handler": "bin/Export",
              "Runtime": "go1.x",
              "FunctionName": "Export",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExportLogGroup"
            ]
          },
          "ExportLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "ExportLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "DeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/Delete.zip"
              },
              "Handler": "bin/Delete",
              "Runtime": "go1.x",
              "FunctionName": "Delete",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteLogGroup"
            ]
          },
          "DeleteLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "GetFieldLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/GetField.zip"
              },
              "Handler": "bin/GetField",
              "Runtime": "go1.x",
              "FunctionName": "GetField",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFieldLogGroup"
            ]
          },
          "GetFieldLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFieldLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "SetFieldLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/SetField.zip"
              },
              "Handler": "bin/SetField",
              "Runtime": "go1.x",
              "FunctionName": "SetField",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SetFieldLogGroup"
            ]
          },
          "SetFieldLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "SetFieldLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "ReferenceGetSortKeysByPartitionKeyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/ReferenceGetSortKeysByPartitionKey.zip"
              },
              "Handler": "bin/ReferenceGetSortKeysByPartitionKey",
              "Runtime": "go1.x",
              "FunctionName": "ReferenceGetSortKeysByPartitionKey",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReferenceGetSortKeysByPartitionKeyLogGroup"
            ]
          },
          "ReferenceGetSortKeysByPartitionKeyLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "ReferenceGetSortKeysByPartitionKeyLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "ReferenceGetByIndexLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/ReferenceGetByIndex.zip"
              },
              "Handler": "bin/ReferenceGetByIndex",
              "Runtime": "go1.x",
              "FunctionName": "ReferenceGetByIndex",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReferenceGetByIndexLogGroup"
            ]
          },
          "ReferenceGetByIndexLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "ReferenceGetByIndexLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "ReferenceAddToManyToManyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/ReferenceAddToManyToMany.zip"
              },
              "Handler": "bin/ReferenceAddToManyToMany",
              "Runtime": "go1.x",
              "FunctionName": "ReferenceAddToManyToMany",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReferenceAddToManyToManyLogGroup"
            ]
          },
          "ReferenceAddToManyToManyLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "ReferenceAddToManyToManyLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "ProductDecreaseAvailabilityByLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/ProductDecreaseAvailabilityBy.zip"
              },
              "Handler": "bin/ProductDecreaseAvailabilityBy",
              "Runtime": "go1.x",
              "FunctionName": "ProductDecreaseAvailabilityBy",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProductDecreaseAvailabilityByLogGroup"
            ]
          },
          "ProductDecreaseAvailabilityByLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "ProductDecreaseAvailabilityByLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "UserVerifyPasswordLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/UserVerifyPassword.zip"
              },
              "Handler": "bin/UserVerifyPassword",
              "Runtime": "go1.x",
              "FunctionName": "UserVerifyPassword",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserVerifyPasswordLogGroup"
            ]
          },
          "UserVerifyPasswordLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "UserVerifyPasswordLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          },
          "NewOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z/NewOrder.zip"
              },
              "Handler": "bin/NewOrder",
              "Runtime": "go1.x",
              "FunctionName": "NewOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NewOrderLogGroup"
            ]
          },
          "NewOrderLambdaEvConf": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
              "FunctionName": {
                "Ref": "NewOrderLambdaFunction"
              },
              "DestinationConfig": {},
              "Qualifier": "$LATEST",
              "MaximumEventAgeInSeconds": 60,
              "MaximumRetryAttempts": 0
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-faas-dev-ServerlessDeploymentBucketName"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "Load": {
        "name": "Load",
        "handler": "bin/Load",
        "package": {
          "include": [
            "bin/Load"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\Load.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "Export": {
        "name": "Export",
        "handler": "bin/Export",
        "package": {
          "include": [
            "bin/Export"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\Export.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "Delete": {
        "name": "Delete",
        "handler": "bin/Delete",
        "package": {
          "include": [
            "bin/Delete"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\Delete.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "GetField": {
        "name": "GetField",
        "handler": "bin/GetField",
        "package": {
          "include": [
            "bin/GetField"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\GetField.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "SetField": {
        "name": "SetField",
        "handler": "bin/SetField",
        "package": {
          "include": [
            "bin/SetField"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\SetField.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "ReferenceGetSortKeysByPartitionKey": {
        "name": "ReferenceGetSortKeysByPartitionKey",
        "handler": "bin/ReferenceGetSortKeysByPartitionKey",
        "package": {
          "include": [
            "bin/ReferenceGetSortKeysByPartitionKey"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\ReferenceGetSortKeysByPartitionKey.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "ReferenceGetByIndex": {
        "name": "ReferenceGetByIndex",
        "handler": "bin/ReferenceGetByIndex",
        "package": {
          "include": [
            "bin/ReferenceGetByIndex"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\ReferenceGetByIndex.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "ReferenceAddToManyToMany": {
        "name": "ReferenceAddToManyToMany",
        "handler": "bin/ReferenceAddToManyToMany",
        "package": {
          "include": [
            "bin/ReferenceAddToManyToMany"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\ReferenceAddToManyToMany.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "ProductDecreaseAvailabilityBy": {
        "name": "ProductDecreaseAvailabilityBy",
        "handler": "bin/ProductDecreaseAvailabilityBy",
        "package": {
          "include": [
            "bin/ProductDecreaseAvailabilityBy"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\ProductDecreaseAvailabilityBy.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "UserVerifyPassword": {
        "name": "UserVerifyPassword",
        "handler": "bin/UserVerifyPassword",
        "package": {
          "include": [
            "bin/UserVerifyPassword"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\UserVerifyPassword.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      },
      "NewOrder": {
        "name": "NewOrder",
        "handler": "bin/NewOrder",
        "package": {
          "include": [
            "bin/NewOrder"
          ],
          "artifact": "C:\\Users\\marek\\OneDrive\\master-thesis\\Thesis_PoC\\example\\faas\\.serverless\\NewOrder.zip"
        },
        "maximumRetryAttempts": 0,
        "maximumEventAge": 60,
        "events": [],
        "memory": 1024,
        "timeout": 6,
        "runtime": "go1.x",
        "vpc": {}
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "frameworkVersion": ">3.24.0",
      "service": "faas",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "exclude": [
          "bin/*",
          "**/**"
        ],
        "artifactsS3KeyDirname": "serverless/faas/dev/code-artifacts",
        "artifactDirectoryName": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/faas/dev/1674916421637-2023-01-28T14:33:41.637Z",
    "artifact": ""
  }
}