package {{.PackageName}}

import (
	"encoding/json"

	"github.com/Astenna/Nubes/lib"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/lambda"
)

func Get[T lib.Nobject](id string) (T, error) {
	typeName := (*new(T)).GetTypeName()

	jsonParam, err := json.Marshal(id)
	if err != nil {
		return *new(T), err
	}

	out, _err := LambdaClient.Invoke(&lambda.InvokeInput{FunctionName: aws.String("Get" + typeName), Payload: jsonParam})
	if _err != nil {
		return *new(T), _err
	}

	result := new(T)
	err = json.Unmarshal(out.Payload, result)
	if err != nil {
		return *new(T), err
	}

	return *result, err
}

func Create[T lib.Nobject](toBeCreated T) (string, error) {
	typeName := toBeCreated.GetTypeName()

	jsonParam, err := json.Marshal(toBeCreated)
	if err != nil {
		return "", err
	}

	out, _err := LambdaClient.Invoke(&lambda.InvokeInput{FunctionName: aws.String("Create" + typeName), Payload: jsonParam})
	if _err != nil {
		return "", _err
	}

	var newObjectId string
	err = json.Unmarshal(out.Payload, newObjectId)
	if err != nil {
		return "", err
	}

	return newObjectId, err
}

func Delete[T lib.Nobject](id string) error {
	typeName := (*new(T)).GetTypeName()

	jsonParam, err := json.Marshal(id)
	if err != nil {
		return err
	}

	_, _err := LambdaClient.Invoke(&lambda.InvokeInput{FunctionName: aws.String("Delete" + typeName), Payload: jsonParam})
	if _err != nil {
		return _err
	}

	return _err
}

func Update[T lib.Nobject](toBeUpdated aws.JSONValue) error {
	typeName := (*new(T)).GetTypeName()

	jsonParam, err := json.Marshal(toBeUpdated)
	if err != nil {
		return err
	}

	_, _err := LambdaClient.Invoke(&lambda.InvokeInput{FunctionName: aws.String("Update" + typeName), Payload: jsonParam})
	if _err != nil {
		return _err
	}

	return err
}
