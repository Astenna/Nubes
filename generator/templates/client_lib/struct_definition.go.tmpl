package client_lib

import (
	"encoding/json"

	"github.com/Astenna/Nubes/lib"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/lambda"
)

{{.StructDefinition}}

func ({{.ReceiverName}} {{.ReceiverType}}) {{.FuncName}}({{if .InputParamName}}{{.InputParamName}} {{.InputParamType}}{{end}}) {{if .OptionalReturnType}} ({{.OptionalReturnType}}, error) {{else}} error {{end}} {
    params := new(lib.HandlerParameters)
    {{if .ReceiverName}} params.Id = {{.ReceiverName}}.Id {{end}}
    {{if .InputParamName}} params.input = {{.InputParamName}} {{end}}

    jsonParam, err := json.Marshal(params)
	if err != nil {
		return *new(Order), err
	}
}


func (o *Order) ClientLibFuncExample(input string) (Order, error) {
	params := new(lib.HandlerParameters)
	params.Id = o.Id
	params.Parameter = input

	jsonParam, err := json.Marshal(input)
	if err != nil {
		return {{if .OptionalReturnType}} *new({{.OptionalReturnType}}), {{end}} err
	}

	out, err := lambdaClient.Invoke(&lambda.InvokeInput{FunctionName: aws.String("{{.FuncName}}{{.ReceiverName}}"), Payload: jsonParam})
	if err != nil {
		return {{if .OptionalReturnType}} *new({{.OptionalReturnType}}), {{end}} err
	}

    {{if .OptionalReturnType}} {{.OptionalReturnType}}
    result := new({{.OptionalReturnType}})
	err = json.Unmarshal(out.Payload, result)
	if err != nil {
		return *new({{.OptionalReturnType}}), err
	}
    {{end}}
	
	return err
}
