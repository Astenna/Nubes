package main

import (
	lib "github.com/Astenna/Nubes/lib"
	"github.com/aws/aws-lambda-go/lambda"
)

func GetStateHandler(input lib.GetStateParam) (interface{}, error) {
	var output interface{}
	var err error

	if input.GetStub {
		output, err = lib.GetStubWithTypeNameAsArg(input.Id, input.TypeName)
		if err != nil {
			return *new(interface{}), err
		}
		outputMap := output.(map[string]interface{})

		// workaround required because the lib.GetStubsInBatchWithTypeNameAsArg
		// deserializes into interface{} (not concerete type),
		// thereby ignoring the dynamodb serialization tags for the custom ID.
		// As a result the 'Id'column was not deserialized into proper custom ID field.
		{{if .}}
		switch input.TypeName {
		{{end}}
		{{range $index, $element := .}}
			case "{{$index}}":
				outputMap["{{$element}}"] = outputMap["Id"]
		{{end}}
		{{if .}}
			}
		{{end}}

		return outputMap, nil
	}
	// same as above
	{{range $index, $element := .}}
		if input.TypeName == "{{$index}}"  && input.FieldName == "{{$element}}" {
			input.FieldName = "Id"
			return lib.GetField(input)
		}
	{{end}}
	
	return lib.GetField(input)
}

func main() {
	lambda.Start(GetStateHandler)
}
