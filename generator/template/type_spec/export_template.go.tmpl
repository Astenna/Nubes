package main

import (
	"fmt"

	{{.OrginalPackageAlias}} "{{.OrginalPackage}}"

	lib "github.com/Astenna/Nubes/lib"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/mitchellh/mapstructure"
)

func ExportHandler(input aws.JSONValue) (string, error) {
	if input["TypeName"] == nil || input["TypeName"] == "" {
		return "", fmt.Errorf("missing TypeName in HandlerParameters")
	}

	switch input["TypeName"] {
	{{range $key,$value := .IsNobjectInOrginalPackage}}
	{{if $value}} case "{{$key}}":
			{{$customDefinition := index $.TypesWithCustomExport $key}}
			{{if $customDefinition.InputParameterType}}
				new{{$key}} := new({{$customDefinition.InputParameterType}})
				mapstructure.Decode(input["Parameter"], new{{$key}})
				return {{$.OrginalPackageAlias}}.Export{{$key}}(*new{{$key}})
			{{else}}
				new{{$key}} := new({{$.OrginalPackageAlias}}.{{$key}})
				mapstructure.Decode(input["Parameter"], new{{$key}})
				return lib.Insert(new{{$key}})
			{{end}}
	{{end}} {{end}}

	default:
		return "", fmt.Errorf("%s not supported",  input["TypeName"])

	}
}

func main() {
	lambda.Start(ExportHandler)
}
