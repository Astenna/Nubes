package main

import (
	"fmt"

	{{.OrginalPackageAlias}} "{{.OrginalPackage}}"

	lib "github.com/Astenna/Nubes/lib"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go/aws"
	{{if len .TypesWithCustomDelete}} "github.com/mitchellh/mapstructure" {{end}} 
)

func DeleteHandler(input aws.JSONValue) error {
	if input["TypeName"] == "" {
		return fmt.Errorf("missing TypeName in HandlerParameters")
	}

	{{if len .TypesWithCustomDelete}}
		switch input["TypeName"] {
		{{range $key,$value := .TypesWithCustomDelete}}
		{{if $value}} case "{{$key}}":
			new{{$key}} := new({{$value.InputParameterType}})
			mapstructure.Decode(input["Parameter"], new{{$key}})
			return {{$.OrginalPackageAlias}}.Delete{{$key}}(*new{{$key}})
		{{end}} 
		{{end}}
		default:
	{{end}} // end if TypesWithCustomDelete exist
		if input["Id"] == "" {
			return fmt.Errorf("missing Id in HandlerParameters")
		}
		err := lib.DeleteWithTypeNameAsArg(input["Id"].(string), input["TypeName"].(string))

		if err != nil {
			return fmt.Errorf("failed to delete type %s with id: %s. Error %w", input["TypeName"], input["Id"], err)
		}
	{{if len .TypesWithCustomDelete}} } // switch closing for if TypesWithCustomDelete exist {{end}} 

	return nil
}

func main() {
	lambda.Start(DeleteHandler)
}
